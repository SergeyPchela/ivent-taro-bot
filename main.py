import os
import random
import json
import requests
from io import BytesIO
from PIL import Image
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from google.oauth2 import service_account
from googleapiclient.discovery import build

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')  # –ü–æ–∫–∞ –Ω–µ –Ω—É–∂–µ–Ω, –æ—Å—Ç–∞–≤–∏–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
FOLDER_ID = os.getenv('FOLDER_ID')
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# –ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
SERVICE_ACCOUNT_FILE = 'iventtarobot-f314d38a42d7.json'
SCOPES = ['https://www.googleapis.com/auth/drive.readonly']

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
credentials = service_account.Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE, scopes=SCOPES
)
drive_service = build('drive', 'v3', credentials=credentials)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–ª–æ–¥—ã –∫–∞—Ä—Ç
with open('ivent_taro_full_deck_numbers_full.json', 'r', encoding='utf-8') as f:
    deck = json.load(f)

# –ü–æ–∑–∏—Ü–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞
positions = [
    ("ü•Ç –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ –∏ –≥–æ—Å—Ç–∏", "–ö—É–±–∫–∏"),
    ("üé§ –ö–∞–∫ –ø—Ä–æ–π–¥—É—Ç —à–æ—É –Ω–∞ —Å—Ü–µ–Ω–µ", "–ñ–µ–∑–ª—ã"),
    ("‚öôÔ∏è –¢–µ—Ö–Ω–∏–∫–∞ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "–ú–µ—á–∏"),
    ("üí∞ –§–∏–Ω–∞–Ω—Å—ã –∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–∏", "–ü–µ–Ω—Ç–∞–∫–ª–∏")
]

# –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –Ω–∞ Google Drive —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
def find_file_on_drive(file_name):
    query = f"name = '{file_name}' and '{FOLDER_ID}' in parents and trashed = false"
    results = drive_service.files().list(
        q=query,
        spaces='drive',
        fields='files(id, name)'
    ).execute()
    items = results.get('files', [])
    if not items:
        return None
    return items[0]['id']

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª
def get_drive_download_link(file_id):
    return f"https://drive.google.com/uc?id={file_id}"

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–≤–æ—Ä–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def download_and_rotate_image(image_url, rotate=False):
    response = requests.get(image_url)
    if response.status_code == 200:
        img = Image.open(BytesIO(response.content))
        if rotate:
            img = img.rotate(180, expand=True)
        bio = BytesIO()
        bio.name = 'card.png'
        img.save(bio, 'PNG')
        bio.seek(0)
        return bio
    return None

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üçè –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–≤–µ–Ω—Ç –¢–∞—Ä–æ!\n\n"
        "–ó–¥–µ—Å—å –∫–∞—Ä—Ç—ã —Ä–∞—Å—Å–∫–∞–∂—É—Ç:\n"
        "‚Ä¢ –ö–∞–∫–∞—è –±—É–¥–µ—Ç –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ —Å—Ä–µ–¥–∏ –≥–æ—Å—Ç–µ–π ü•Ç\n"
        "‚Ä¢ –ö–∞–∫ –ø—Ä–æ–π–¥—É—Ç —à–æ—É –Ω–∞ —Å—Ü–µ–Ω–µ üé§\n"
        "‚Ä¢ –í—Å—ë –ª–∏ –±—É–¥–µ—Ç –≤ –ø–æ—Ä—è–¥–∫–µ —Å —Ç–µ—Ö–Ω–∏–∫–æ–π ‚öôÔ∏è\n"
        "‚Ä¢ –ò –ø–æ—Ä–∞–¥—É—é—Ç –ª–∏ –≤–∞—Å —Ñ–∏–Ω–∞–Ω—Å—ã üí∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /rasclad, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ!"
    )

# –ö–æ–º–∞–Ω–¥–∞ /rasclad
async def rasclad(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîÆ‚ú® –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–∞—Ä—Ç—ã...")

    for position_text, suit in positions:
        available_cards = [card for card in deck if card['suit'] == suit or card['suit'] == '–°—Ç–∞—Ä—à–∏–π –ê—Ä–∫–∞–Ω']
        card = random.choice(available_cards)

        is_reversed = random.choice([True, False])
        file_id = find_file_on_drive(card['name'].replace(' ', '_') + ".png")

        if file_id:
            image_url = get_drive_download_link(file_id)
            rotated_image = download_and_rotate_image(image_url, rotate=is_reversed)

            if rotated_image:
                caption = f"{position_text}:\n{card['name']} ({'–ü–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞—è' if is_reversed else '–ü—Ä—è–º–∞—è'})\n‚û°Ô∏è {card['reversed' if is_reversed else 'upright']}"
                await update.message.reply_photo(photo=rotated_image, caption=caption)
            else:
                await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {card['name']}")
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –ö–∞—Ä—Ç–∞ {card['name']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    keyboard = [[InlineKeyboardButton("üåü –°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥", callback_data='new_rasclad')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üîÆ –•–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?\n"
        "üí¨ –ü–æ–º–Ω–∏—Ç–µ: —Ç–æ–ª—å–∫–æ –≤—ã —Å–æ–∑–¥–∞—ë—Ç–µ —Å–≤–æ—é —Å—É–¥—å–±—É!",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'new_rasclad':
        await rasclad(query, context)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("rasclad", rasclad))
    app.add_handler(CallbackQueryHandler(button))

    app.run_polling()
