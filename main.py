import random
import json
import requests
import os
from io import BytesIO
from PIL import Image
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# –ö–ª—é—á–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')
FOLDER_ID = os.getenv('FOLDER_ID')
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–ª–æ–¥—ã –∫–∞—Ä—Ç
with open('ivent_taro_full_deck.json', 'r', encoding='utf-8') as f:
    deck = json.load(f)

# –ü–æ–∑–∏—Ü–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞
positions = [
    ("ü•Ç –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ –∏ –≥–æ—Å—Ç–∏", "–ö—É–±–∫–∏"),
    ("üé§ –ö–∞–∫ –ø—Ä–æ–π–¥—É—Ç —à–æ—É –Ω–∞ —Å—Ü–µ–Ω–µ", "–ñ–µ–∑–ª—ã"),
    ("‚öôÔ∏è –¢–µ—Ö–Ω–∏–∫–∞ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "–ú–µ—á–∏"),
    ("üí∞ –§–∏–Ω–∞–Ω—Å—ã –∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–∏", "–ü–µ–Ω—Ç–∞–∫–ª–∏")
]

# –û–∫–æ–Ω—á–∞–Ω–∏—è –º–∞—Å—Ç–µ–π
suit_endings = {
    "–ñ–µ–∑–ª—ã": "–ñ–µ–∑–ª–æ–≤",
    "–ö—É–±–∫–∏": "–ö—É–±–∫–æ–≤",
    "–ú–µ—á–∏": "–ú–µ—á–µ–π",
    "–ü–µ–Ω—Ç–∞–∫–ª–∏": "–ü–µ–Ω—Ç–∞–∫–ª–µ–π"
}

# –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –Ω–∞ Google Drive
def find_file_on_drive(file_name):
    search_url = (
        f"https://www.googleapis.com/drive/v3/files?q="
        f"name='{file_name}' and '{FOLDER_ID}' in parents and trashed=false"
        f"&key={GOOGLE_API_KEY}&fields=files(id,name)"
    )
    response = requests.get(search_url)
    if response.status_code == 200:
        files = response.json().get('files', [])
        if files:
            return files[0]['id']
    return None

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª
def get_drive_download_link(file_id):
    return f"https://drive.google.com/uc?id={file_id}"

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–≤–æ—Ä–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def download_and_rotate_image(image_url, rotate=False):
    response = requests.get(image_url)
    if response.status_code == 200:
        img = Image.open(BytesIO(response.content))
        if rotate:
            img = img.rotate(180, expand=True)
        bio = BytesIO()
        bio.name = 'card.png'
        img.save(bio, 'PNG')
        bio.seek(0)
        return bio
    return None

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üçè –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–≤–µ–Ω—Ç –¢–∞—Ä–æ ‚Äî –≤–æ–ª—à–µ–±–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ –¥–ª—è –≤–∞—à–µ–≥–æ –±—É–¥—É—â–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!\n\n"
        "–ó–¥–µ—Å—å –∫–∞—Ä—Ç—ã —Ä–∞—Å—Å–∫–∞–∂—É—Ç:\n"
        "‚Ä¢ –ö–∞–∫–æ–π –±—É–¥–µ—Ç –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ —Å—Ä–µ–¥–∏ –≥–æ—Å—Ç–µ–π ü•Ç\n"
        "‚Ä¢ –ö–∞–∫ –ø—Ä–æ–π–¥—É—Ç —à–æ—É –Ω–∞ —Å—Ü–µ–Ω–µ üé§\n"
        "‚Ä¢ –í—Å—ë –ª–∏ –±—É–¥–µ—Ç –≤ –ø–æ—Ä—è–¥–∫–µ —Å —Ç–µ—Ö–Ω–∏–∫–æ–π ‚öôÔ∏è\n"
        "‚Ä¢ –ò –ø–æ—Ä–∞–¥—É—é—Ç –ª–∏ –≤–∞—Å —Ñ–∏–Ω–∞–Ω—Å—ã üí∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /rasclad, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ!"
    )

# –ö–æ–º–∞–Ω–¥–∞ /rasclad
async def rasclad(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîÆ‚ú® –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–∞—Ä—Ç—ã, –≤—Ä–∞—â–∞–µ–º –∫–æ–ª–µ—Å–æ —Å—É–¥—å–±—ã... –í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!")

    for position_text, suit in positions:
        available_cards = [card for card in deck if card['suit'] == suit or card['suit'] == '–°—Ç–∞—Ä—à–∏–π –ê—Ä–∫–∞–Ω']
        card = random.choice(available_cards)

        is_reversed = random.choice([True, False])

        if card['suit'] == "–°—Ç–∞—Ä—à–∏–π –ê—Ä–∫–∞–Ω":
            card_name = card['name'].title().replace(' ', '_')
            file_name = f"{card['number']}_{card_name}.png"
        elif "number" in card:
            suit_name = suit_endings.get(card['suit'], card['suit'])
            file_name = f"{card['number']}_{suit_name}.png"
        else:
            file_name = f"{card['name']}.png"

        file_id = find_file_on_drive(file_name)

        if file_id:
            image_url = get_drive_download_link(file_id)
            rotated_image = download_and_rotate_image(image_url, rotate=is_reversed)
            if rotated_image:
                caption = f"{position_text}:\n{card['name']} ({'–ü–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞—è' if is_reversed else '–ü—Ä—è–º–∞—è'})\n‚û°Ô∏è {card['reversed' if is_reversed else 'upright']}"
                await update.message.reply_photo(photo=rotated_image, caption=caption)
            else:
                await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã {card['name']} (–æ–∂–∏–¥–∞–ª–∏ —Ñ–∞–π–ª: {file_name}).")
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –ö–∞—Ä—Ç–∞ {card['name']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Google Drive (–æ–∂–∏–¥–∞–ª–∏ —Ñ–∞–π–ª: {file_name}).")

    keyboard = [[InlineKeyboardButton("üéØ –°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥", callback_data='new_rasclad')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üîÆ –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n"
        "üí¨ –ü–æ–º–Ω–∏—Ç–µ: –∏–∑–º–µ–Ω–∏—Ç—å –°—É–¥—å–±—É –≤ —Å–∏–ª–∞—Ö —Ç–æ–ª—å–∫–æ –æ–ø—ã—Ç–Ω—ã–µ –∏–≤–µ–Ω—Ç–µ—Ä—ã!",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'new_rasclad':
        await rasclad(query, context)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("rasclad", rasclad))
    app.add_handler(CallbackQueryHandler(button))

    app.run_polling()
